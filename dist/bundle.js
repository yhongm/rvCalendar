!function(t){var e={};function r(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,o){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(o,i,function(e){return t[e]}.bind(null,i));return o},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";var o,i=r(1),n=(o=i)&&o.__esModule?o:{default:o};window.onload=function(){(0,n.default)("#app",function(t){console.log("select,:"+t)})}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var r=l.getWeeks(),o=new n.default({el:t,data:{year:""+l.year,month:""+(l.month+1),weekTitles:[{id:"weekkey1",value:"一"},{id:"weekkey2",value:"二"},{id:"weekkey3",value:"三"},{id:"weekkey4",value:"四"},{id:"weekkey5",value:"五"}],weeks:r},dom:{tag:"table",props:{border:0,cellpadding:"0",cellspacing:"1",id:"caltable",key:"table",style:"text-decoration:none;width:200;background-color:#D0D0EE;font-size:8pt;border:0px dotted #1C6FF5;"},children:[{tag:"thead",props:{key:"thead"},children:[{tag:"tr",props:{align:"center",valign:"middle",id:"title",key:"title",style:"font-weight:normal;height:24px;text-align:center;color:#333333;text-decoration:none;background-color:#A4B9D7;border-top-width:1px;border-right-width:1px;border-bottom-width: 1px; border-left-width: 1px;border-bottom-style: 1px;border-top-color: #999999;border-right-color: #999999;border-bottom-color:#999999;border-left-color:#999999;"},children:[{tag:"td",props:{colspan:"7",key:"tdTitle"},children:[{tag:"div",props:{key:"titleDiv"},children:[{tag:"button",props:{onclick:"mCalendar.subMonth()",style:"font-weight:bold; color:#243F65;cursor:hand;text-decoration:none;",key:"subButton"},children:["<"]},{tag:"input",props:{name:"year",type:"text",maxlength:"4",style:"font-size: 9pt; text-decoration: none;background-color: #FFFFFF;height: 20px;border: 1px solid #666666; color: #000000;",size:"4",value:"%#year#%",key:"inputYear"},children:[""]},{tag:"input",props:{name:"month",type:"text",maxlength:"2",value:"%#month#%",style:"font-size: 9pt; text-decoration: none;background-color: #FFFFFF;height: 20px;border: 1px solid #666666; color: #000000;",size:"2",key:"inputMonth"},children:[""]},{tag:"button",props:{onclick:"mCalendar.addMonth()",style:"font-weight: bold;color: #243F65;cursor: hand;text-decoration: none;",key:"addButton"},children:[">"]}]}]}]},{tag:"tr",props:{key:"daytr"},children:[{tag:"td",props:{style:"color: #FF0000;text-decoration: none;background-color: #C0D0E8;text-align: center;height: 20px;width: 12%;",key:"daySunTitle"},children:["日"]},{tag:"td",props:{style:"color:#000000;background-color:#C0D0E8;height:20px;width:11%;text-align:center;",key:"%#v.id#%",for:"v _in_ weekTitles"},children:["%#v.value#%"]},{tag:"td",props:{style:" color:#FF0000;text-decoration:none;background-color:#C0D0E8;text-align:center;height: 20px;width: 12%;",key:"daySatTitle"},children:["六"]}]}]},{tag:"tbody",props:{cellspacing:"0",cellpadding:"0",id:"calendar",style:" text-decoration: none;width: 170;background-color: #C0D0E8;font-size: 9pt;border: 0px dotted #1C6FA5;",align:"center",border:"1",key:"tbody"},children:[{tag:"tr",props:{style:"cursor:hand",key:"%#week.id#%",for_for:"week _in_ weeks"},children:[{tag:"td",props:{key:"%#v.id#%",onclick:"clickDay(this)",style:"%#v.style#%",lable:"%#v.lable#%",onMouseover:"mouseOver(this);",onMouseOut:"mouseOut(this);",for:"v _in"},children:["%#v.content#%"]}]}]}]}}),i=l.month,s=l.year,a=l.selectDay;Object.defineProperty(l,"month",{set:function(t){console.log("newMonth:"+t),i!=t&&(i=t,o.data.weeks=l.getWeeks(),o.data.month=t+1)},get:function(){return i}}),Object.defineProperty(l,"year",{set:function(t){s!=t&&(console.log("newYear:"+t),s=t,o.data.weeks=l.getWeeks(),o.data.year=t)},get:function(){return s}}),Object.defineProperty(l,"selectDay",{set:function(t){a!=t&&(a=t,e(t))},get:function(){return a}})};var o,i=r(2),n=(o=i)&&o.__esModule?o:{default:o};function s(){this.months=new Array("一","二","三","四","五","六","七","八","九","十","十一","十二"),this.dayCounts=new Array(31,28,31,30,31,30,31,31,30,31,30,31),this.days=new Array("日","一","二","三","四","五","六"),this.today=this.getToday(),this.year=this.today.year,this.month=this.today.month,this.newCal=new Date,this.selectDay=this.newCal,this.day=-1,this.startDay=0,this.daily=0,this.rv=void 0,this.today.year==this.newCal.getFullYear()&&this.today.month==this.newCal.getMonth()&&(this.day=this.today.day)}s.prototype.getWeeks=function(){this.newCal=new Date(this.year,this.month,1),this.day=-1,this.startDay=this.newCal.getDay(),this.daily=0,this.today.year==this.newCal.getFullYear()&&this.today.month==this.newCal.getMonth()&&(this.day=this.today.day);for(var t=this.getDayCounts(this.newCal.getMonth(),this.newCal.getFullYear()),e=[],r=0;r<6;r++){var o=[];o.id="week_row_"+r;for(var i=0;i<7;i++){var n={},s="",l="",a="",h="week_day_"+r+i;i==this.startDay&&0==this.daily&&(this.daily=1),this.day==this.daily?(l="font-weight:bold;color:#000000;background-color:#FFFFFF;height:20px;text-align:center",a="current"):6==i?(l="color:#FF0000;text-decoration:none;background-color:#E5E9F2;text-align:center;height:18px;width:12%",a="sat"):0==i?(l="color: #FF0000;text-decoration:none;background-color:#E5E9F2;text-align:center;height:18px;width:12%",a="sun"):(l="color:#243F65;background-color:#E5E9F2;height:20px;width:11%;text-align:center",a="normal"),this.daily>0&&this.daily<=t?(s=this.daily+"",this.daily++):(l="color:#000000;background-color: #f6f6f6;height:20px;width: 11%;text-align:center",s=""),n.content=s,n.id=h,n.lable=a,n.style=l,o.push(n)}e.push(o),window.weeks=e}return e},s.prototype.getDayCounts=function(t,e){return 1==t?0==e%4&&0!=e%100||0==e%400?29:28:this.dayCounts[t]},s.prototype.getToday=function(){var t={},e=new Date;return t.now=e,t.year=e.getFullYear(),t.month=e.getMonth(),t.day=e.getDate(),t},s.prototype.subMonth=function(){this.month-1<0?(this.month=11,this.year=this.year-1):this.month=this.month-1,console.log("month:"+this.month)},s.prototype.addMonth=function(){this.month+1>11?(this.month=0,this.year=this.year+1):this.month=this.month+1},s.prototype.setMonth=function(t){t<1||t>12?alert("月份必须在1-12之间!"):this.month=t},s.prototype.setYear=function(t){this.year=t},window.mouseOver=function(t){t.style.color="#FFFFFF"},window.mouseOut=function(t){var e=t.getAttribute("lable");t.style.color="sat"==e||"sun"==e?"#FF0000":"#000000"};var l=new s;window.mCalendar=l,window.clickDay=function(t){if(""!=t.innerText){var e=new Date(l.year,l.month,t.innerText);l.selectDay=e}}},function(t,e,r){"use strict";r.r(e);function o(t,e,r){if(!(this instanceof o))return new o(tagName,e,r);if(this.tag=t,this.props=e||{},this.children=r||[],this.key=e?e.key:void 0,!this.key)throw new Error(`${t} ... the key is undefined`);let i=0;this.children.forEach(t=>{t instanceof o&&(i+=t.count),i++}),this.count=i}function i(t,e){this.index=0,this.patches={},this.dfsWalk(t,e,this.index)}function n(t,e){this.dfsWalk(t,{index:0},e)}function s(){}function l(t,e){let r=l(t).keyIndex,o=l(e).keyIndex;this.moveOperator=[],this.childList=[];for(let r=0;r<t.length;r++){let i=a(t[r]);o.hasOwnProperty(i)?this.childList.push(e[o[i]]):this.childList.push(null)}this.tempList=this.childList.slice(0);let i=0;for(;i<this.tempList.length;)null===this.tempList[i]?(this.remove(i),this.removeCopyTempList(i)):i++;let n=0;for(let t=0;t<e.length;t++){let o=e[t],i=a(o),s=this.tempList[n],l=a(s);if(s)if(i!=l)if(r.hasOwnProperty(i)){i===a(this.tempList[n+1])?(this.remove(t),this.removeCopyTempList(n),n++):this.insert(t,o)}else this.insert(t,o);else n++;else this.insert(t,o)}let s=this.tempList.length-n;for(;n++<this.tempList.length;)s--,this.remove(s+e.length);function l(t){var e={};for(let r=0;r<t.length;r++){e[a(t[r])]=r}return{keyIndex:e}}function a(t){if(t)return t.key}}function a(){this.updateFunctions=new Set}function d(){this.length=0,this.map=new Object}function c(t){const{el:e,data:r,dom:o}=t;var i,n,l,h=s.isString(e)?document.querySelector(e):e;this.data=r,this.ve=this.getVirtualElement(this.applyTruthfulData(o)),this.w=this.ve.render(),h.appendChild(this.w),this.observeMap=new d,i=this.data,n=this.observeMap,l=()=>{this.updatedom(o)},Object.keys(i).forEach(t=>{let e=i[t];var r=new a;n.put(t,r),Object.defineProperty(i,t,{get:()=>(r.add(l),e),set(t){const o=e!==t;e=t,o&&r.invoke()}})}),this.updatedom(o)}o.prototype.render=function(){const t=document.createElement(this.tag),e=this.props;for(const r in e)s.setAttr(t,r,e[r]);return this.children.forEach(e=>{const r=e instanceof o?e.render():document.createTextNode(e);t.appendChild(r)}),t},i.prototype.dfsWalk=function(t,e,r){var o=[];if(null==e);else if(s.isString(t)&&s.isString(e))t!=e&&o.push({type:3,content:e});else if(t.tagName===e.tagName&&t.key==e.key){var i=this.diffProps(t,e);i&&o.push({type:2,props:i}),s.isIgnoreChildren(e)||this.diffChildren(t.children,e.children,r,o)}else o.push({type:0,node:e});o.length&&(this.patches[r]=o)},i.prototype.diffProps=function(t,e){const r=t.props,o=e.props,i={};let n=!0;for(let t in r)o[t]!==r[t]&&(n=!1,i[t]=o[t]);for(let t in o)r.hasOwnProperty(t)||(n=!1,i[t]=o[t]);return n?null:i},i.prototype.diffChildren=function(t,e,r,o){var i=new l(t,e).getResult();if(e=i.child,i.moves.length){var n={type:1,moves:i.moves};o.push(n)}var s=null,a=r;t.forEach((t,r)=>{var o=e[r];a=s&&s.count?a+s.count+1:a+1,this.dfsWalk(t,o,a),s=t})},n.prototype.dfsWalk=function(t,e,r){var o=r[e.index],i=t.childNodes?t.childNodes.length:0;for(let o=0;o<i;o++){var n=t.childNodes[o];e.index++,this.dfsWalk(n,e,r)}o&&this.applyPatches(t,o)},n.prototype.applyPatches=function(t,e){e.forEach(e=>{switch(e.type){case 0:var r=s.isString(e.node)?document.createTextNode(e.node):e.node.render();t.parentNode.replaceChild(r,t);break;case 1:this.reorderChildren(t,e.moves);break;case 2:this.setProps(t,e.props);break;case 3:t.textContent?t.textContent=e.content:t.nodeValue=e.content}})},n.prototype.reorderChildren=function(t,e){var r=s.toArray(t.childNodes),o={};r.forEach(t=>{if(1===t.nodeType){var e=t.getAttribute("key");e&&(o[e]=t)}}),e.forEach(e=>{var i=e.index;if(0===e.type)r[i]===t.childNodes[i]&&t.removeChild(t.childNodes[i]),r.splice(i,1);else if(1===e.type){var n=o[e.item.key]?o(e.item.key).cloneNode(!0):s.isString(e.item)?document.createTextNode(e.item):e.item.render();r.splice(i,0,n),t.insertBefore(n,t.childNodes[i]||null)}})},n.prototype.setProps=function(t,e){for(let r in e)if(void 0===e[r])t.removeAttribute(r);else{const o=e[r];s.setAttr(t,r,o)}},s.isString=function(t){return"string"==typeof t},s.toArray=function(t){if(!t)return[];var e=[];for(let r=0;r<t.length;r++)e.push(t[r]);return e},s.isForIn=function(t){return/^\w* _in_ \w*$/.test(t)},s.isForForIn=function(t){return/^\w* _in*$/.test(t)},s.isForOrForFor=function(t){return/^\w* _in_ \w|_in*$/.test(t)},s.isIgnoreChildren=function(t){return t.props&&t.props.hasOwnProperty("ignore")},s.setAttr=function(t,e,r){switch(e){case"style":t.style.cssText=r;break;case"value":let o=t.tagName||"";"input"===(o=o.toLowerCase())||"textarea"===o?t.value=r:t.setAttribute(e,r);break;default:t.setAttribute(e,r)}},l.prototype.removeCopyTempList=function(t){this.tempList.splice(t,1)},l.prototype.remove=function(t){this.moveOperator.push({index:t,type:0})},l.prototype.insert=function(t,e){this.moveOperator.push({index:t,item:e,type:1})},l.prototype.getResult=function(){return{moves:this.moveOperator,child:this.childList}},a.prototype.add=function(t){this.updateFunctions.add(t)},a.prototype.invoke=function(){this.updateFunctions.forEach(t=>t())},window.h=function(t,e,r){return new o(t,e,r)},d.prototype={constructor:void 0,put:function(t,e){t in this.map||this.length++,this.map[t]=e},get:function(t){return t in this.map?this.map[t]:null},remove:function(t){t in this.map&&(delete this.map[t],this.length--)},size:function(){return this.length},clear:function(){length=0,this.map=new Object}},c.prototype.updatedom=function(t){let e=this.getVirtualElement(this.applyTruthfulData(t));var r,o,s;window.nve=e,window.ve=this.ve,r=this.w,s=this.ve,o=new i(s,e).patches,new n(r,o),this.ve=e},c.prototype.watch=function(t,e){this.observeMap.get(t).add(e)},c.prototype.getVirtualElement=function(t){var e=[];for(let i in t.children){var r=t.children[i];if(r instanceof Array)r.forEach(t=>{var r=this.getVirtualElement(t);e.push(r)});else if(r instanceof Object){var o=this.getVirtualElement(r);e.push(o)}else e.push(r)}return h(t.tag,t.props,e)},c.prototype.applyTruthfulData=function(t){if("for"in t.props||"for_for"in t.props){let r,o=[],i=!1;if(t.props.for){if(s.isForOrForFor(t.props.for))if(t.forData){if(s.isForIn(t.props.for))throw new Error("plase use _in direction");o=t.forData,r=t.props.for.split(" _in")[0]}else{if(s.isForForIn(t.props.for))throw new Error("plase use _in_ direction");o=this.data[t.props.for.split(" _in_ ")[1]],r=t.props.for.split(" _in_ ")[0]}}else{if(!t.props.for_for)throw new Error("the for direction use error");if(s.isForOrForFor(t.props.for_for)){if(s.isForForIn(t.props.for_for))throw new Error("plase use _in_ direction");i=!0,o=this.data[t.props.for_for.split(" _in_ ")[1]],r=t.props.for_for.split(" _in_ ")[0]}}var e=[];return o.forEach(o=>{var n={};for(var l in n.tag=t.tag,n.children=[],n.props={},t.children)s.isString(t.children[l])?c.isPlaceHolder(t.children[l])?-1==c.getPlaceHolderValue(t.children[l]).indexOf(r)?n.children[l]=this.data[c.getPlaceHolderValue(t.children[l])]:n.children[l]=o[c.getPlaceHolderValue(t.children[l]).split(".")[1]]:n.children[l]=t.children[l]:(i&&(t.children[l].forData=o),n.children[l]=this.applyTruthfulData(t.children[l]));let a=Object.keys(t.props);for(var h in a){var d=a[h];if("style"===d){let e=t.props[d];if(e.indexOf(",")>-1){var p=e.split(",");n.props[d]=this.handleArrayStyle(o,p,r)}else n.props[d]=this.handleSingleStyle(o,e,r)}else c.isPlaceHolder(t.props[d])?-1==c.getPlaceHolderValue(t.props[d]).indexOf(r)?n.props[d]=this.data[c.getPlaceHolderValue(t.props[d])]:n.props[d]=o[c.getPlaceHolderValue(t.props[d]).split(".")[1]]:n.props[d]=t.props[d]}e.push(n)}),e}{var r={};for(var o in r.tag=t.tag,r.children=[],r.props={},t.children)s.isString(t.children[o])?c.isPlaceHolder(t.children[o])?r.children[o]=this.data[c.getPlaceHolderValue(t.children[o])]:r.children[o]=t.children[o]:r.children[o]=this.applyTruthfulData(t.children[o]);let e=Object.keys(t.props);for(var i in e){var n=e[i];if("style"===n){let e=t.props[n];if(e.indexOf(",")>-1){var l=e.split(",");r.props[n]=this.handleArrayStyle(this.data,l,void 0)}else r.props[n]=this.handleSingleStyle(this.data,e,void 0)}else c.isPlaceHolder(t.props[n])?r.props[n]=this.data[c.getPlaceHolderValue(t.props[n])]:r.props[n]=t.props[n]}}return r},c.prototype.handleSingleStyle=function(t,e,r){let o="";if(r)if(c.isPlaceHolder(e))if(-1!=c.getPlaceHolderValue(e).indexOf(r)){o=t[c.getPlaceHolderValue(e).split(".")[1]]}else{var i=e.split(":")[0],n=e.split(":")[1];o=i+":"+(n=t[c.getPlaceHolderValue(n)])}else o=e;else if(c.isPlaceHolder(e)){i=e.split(":")[0],n=e.split(":")[1];o=i+":"+(n=t[c.getPlaceHolderValue(n)])}else o=e;return o},c.prototype.handleArrayStyle=function(t,e,r){var o="";for(var i in e){var n=e[i];o+=this.handleSingleStyle(t,n,r)+";"}return o},c.isPlaceHolder=function(t){return!!t&&!(!t.startsWith("%#")||!t.endsWith("#%"))},c.getPlaceHolderValue=function(t){return t.slice(2,-2)},e.default=c}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,